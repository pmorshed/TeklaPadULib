<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Beam plugin (INP UI)</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<meta name="generator" content="HelpSmith 6.4 (Build 17.127)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  background-color: LemonChiffon;
  margin: 0.06in 0.06in 0.06in 0.06in;
}
</style>
<link type="text/css" href="../css/topics/style.css" rel="stylesheet" />
<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?5b1cb8b7"></script>
<script type="text/javascript" src="../js/core.js?e3fa3091"></script>
<script type="text/javascript" src="../js/topic.js?e3fa3091"></script>
<script type="text/javascript">
	var topicContext = 680;
</script>
</head>
<body>
<div align="left">
  <table class="tbl2">
    <tr class="row0">
      <td class="cell0">
        <p class="ps4"><span class="ts17">//## </span><span class="ts18">Description:</span><span class="ts19">&nbsp;</span><span class="ts25">Beam plug-in (with .inp file user interface)</span><br /><span class="ts17">//## </span><span class="ts18">Credits:</span><span class="ts19">&nbsp;</span><span class="ts25">Tekla Corporation (Tekla OpenAPI Startup Package)</span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps5"><br /><span class="ts20">//Hint: Add the following Dlls to references:</span><br /><span class="ts20">//&quot;Tekla.Structures.dll&quot;</span><br /><span class="ts20">//&quot;Tekla.Structures.Model.dll&quot;</span><br /><span class="ts20">//&quot;Tekla.Structures.Plugins.dll&quot;</span><br /><span class="ts20">//Location: ~\[version]\nt\bin\plugins</span><br /><br /><span class="ts21">using</span><span class="ts22">&nbsp;System;</span><br /><span class="ts21">using</span><span class="ts22">&nbsp;System.Collections.Generic;</span><br /><span class="ts21">using</span><span class="ts22">&nbsp;Tekla.Structures.Plugins;</span><br /><span class="ts21">using</span><span class="ts22">&nbsp;Tekla.Structures.Geometry3d;</span><br /><span class="ts21">using</span><span class="ts22">&nbsp;Tekla.Structures.Model.UI;</span><br /><span class="ts21">using</span><span class="ts22">&nbsp;TSM = Tekla.Structures.Model;</span><br /><br /><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts21">class</span><span class="ts22">&nbsp;</span><span class="ts57">StructuresData</span><br /><span class="ts22">{</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; [StructuresField(</span><span class="ts23">&quot;P1&quot;</span><span class="ts22">)]</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts21">double</span><span class="ts22">&nbsp;Parameter1;</span><br /><span class="ts22">}</span><br /><br /><span class="ts22">[Plugin(</span><span class="ts23">&quot;BeamPlugin&quot;</span><span class="ts22">)] </span><span class="ts20">// Mandatory field which defines that this is the plug-in and stores the name of the plug-in to the system.</span><br /><span class="ts22">[PluginUserInterface(BeamPlugin.UserInterfaceDefinitions.Plugin1)] </span><span class="ts20">// Mandatory field which defines the user interface the plug-in uses. A Windows Forms class or a .inp file.</span><br /><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts21">class</span><span class="ts22">&nbsp;</span><span class="ts57">BeamPlugin</span><span class="ts22">&nbsp;: PluginBase</span><br /><span class="ts22">{</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts21">private</span><span class="ts22">&nbsp;</span><span class="ts21">readonly</span><span class="ts22">&nbsp;StructuresData data;</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts20">// The constructor argument defines the database class StructuresData and sets the data to be used in the plug-in.</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts57">BeamPlugin</span><span class="ts22">(StructuresData data)</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSM.Model M = </span><span class="ts21">new</span><span class="ts22">&nbsp;TSM.Model();</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts21">this</span><span class="ts22">.data = data;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; }</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts20">//Defines the inputs to be passed to the plug-in.</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts21">override</span><span class="ts22">&nbsp;List&lt;InputDefinition&gt; DefineInput()</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Picker BeamPicker = </span><span class="ts21">new</span><span class="ts22">&nbsp;Picker();</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;InputDefinition&gt; PointList = </span><span class="ts21">new</span><span class="ts22">&nbsp;List&lt;InputDefinition&gt;();</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point Point1 = BeamPicker.PickPoint();</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point Point2 = BeamPicker.PickPoint();</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InputDefinition Input1 = </span><span class="ts21">new</span><span class="ts22">&nbsp;InputDefinition(Point1);</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InputDefinition Input2 = </span><span class="ts21">new</span><span class="ts22">&nbsp;InputDefinition(Point2);</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PointList.Add(Input1);</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PointList.Add(Input2);</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts21">return</span><span class="ts22">&nbsp;PointList;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; }</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts20">//Main method of the plug-in.</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts21">override</span><span class="ts22">&nbsp;</span><span class="ts21">bool</span><span class="ts22">&nbsp;Run(List&lt;InputDefinition&gt; Input)</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts21">try</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point Point1 = (Point)(Input[0]).GetInput();</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point Point2 = (Point)(Input[1]).GetInput();</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point LengthVector = </span><span class="ts21">new</span><span class="ts22">&nbsp;Point(Point2.X - Point1.X, Point2.Y - Point1.Y, Point2.Z - Point1.Z);</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts21">if</span><span class="ts22">&nbsp;(data.Parameter1 &gt; 0)</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point2.X = data.Parameter1 * LengthVector.X + Point1.X;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point2.Y = data.Parameter1 * LengthVector.Y + Point1.Y;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point2.Z = data.Parameter1 * LengthVector.Z + Point1.Z;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateBeam(Point1, Point2);</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts21">catch</span><span class="ts22">&nbsp;(Exception)</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts21">return</span><span class="ts22">&nbsp;</span><span class="ts21">true</span><span class="ts22">;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; }</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts21">static</span><span class="ts22">&nbsp;</span><span class="ts21">void</span><span class="ts22">&nbsp;CreateBeam(Point Point1, Point Point2)</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TSM.Beam MyBeam = </span><span class="ts21">new</span><span class="ts22">&nbsp;TSM.Beam(Point1, Point2);</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyBeam.Profile.ProfileString = </span><span class="ts23">&quot;HEA400&quot;</span><span class="ts22">;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyBeam.Finish = </span><span class="ts23">&quot;PAINT&quot;</span><span class="ts22">;</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyBeam.Insert();</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; }</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts20">//.inp file user interface definition:</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; </span><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts21">class</span><span class="ts22">&nbsp;</span><span class="ts57">UserInterfaceDefinitions</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp; {</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts21">public</span><span class="ts22">&nbsp;</span><span class="ts21">const</span><span class="ts22">&nbsp;</span><span class="ts21">string</span><span class="ts22">&nbsp;Plugin1 = </span><span class="ts61">@&quot;&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts61">@&quot;page(&quot;&quot;TeklaStructures&quot;&quot;,&quot;&quot;&quot;&quot;)&quot;</span><span class="ts22">&nbsp;+ </span><span class="ts23">&quot;\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts23">&quot;{\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts23">&quot;&nbsp;&nbsp;&nbsp; plugin(1, BeamPlugin)\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts23">&quot;&nbsp;&nbsp;&nbsp; {\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts61">@&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tab_page(&quot;&quot;Beam test&quot;&quot;, &quot;&quot;Parameters&quot;&quot;, 1)&quot;</span><span class="ts22">&nbsp;+ </span><span class="ts23">&quot;\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts23">&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts61">@&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parameter(&quot;&quot;Length factor&quot;&quot;, &quot;&quot;P1&quot;&quot;, distance, number, 1)&quot;</span><span class="ts22">&nbsp;+ </span><span class="ts23">&quot;\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts23">&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts23">&quot;&nbsp;&nbsp;&nbsp; }\n&quot;</span><span class="ts22">&nbsp;+</span><br /><span class="ts22">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts23">&quot;}\n&quot;</span><span class="ts22">;</span><br /><br /><span class="ts22">&nbsp;&nbsp;&nbsp; }</span><br /><span class="ts22">}</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0"><span class="ts16">&nbsp;</span></p>
<div>
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts24">Usage:</span></p>
<p class="ps2"><span class="ts15">This Tekla Open API example plug-in creates a beam defined by user input.</span></p>
<p class="ps2"><span class="ts15">User can select the length factor for the beam. The plug-in asks the user to pick two points. </span></p>
<p class="ps2"><span class="ts15">Based on those points, it calculates new insertion points using a double parameter from the dialog and creates a beam. </span></p>
</body>
</html>