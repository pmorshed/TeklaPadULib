<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Part rebar schedule with pull-out picture</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<meta name="generator" content="HelpSmith 6.4 (Build 17.127)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  background-color: LemonChiffon;
  margin: 0.06in 0.06in 0.06in 0.06in;
}
</style>
<link type="text/css" href="../css/topics/style.css" rel="stylesheet" />
<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?16b7c0d8"></script>
<script type="text/javascript" src="../js/core.js?e3fa3091"></script>
<script type="text/javascript" src="../js/topic.js?e3fa3091"></script>
<script type="text/javascript">
	var topicContext = 560;
</script>
</head>
<body>
<div align="left">
  <table class="tbl2">
    <tr class="row0">
      <td class="cell0">
        <p class="ps4"><span class="ts16">//## </span><span class="ts17">Author:</span><span class="ts18">&nbsp;TeklaPad</span><br /><span class="ts16">//## </span><span class="ts17">Description:</span><span class="ts18">&nbsp;</span><span class="ts24">Part rebar schedule with pull-out picture</span><br /><span class="ts16">//## </span><span class="ts17">Compatibility:</span><span class="ts18">&nbsp;TS18 or newer</span><br /><span class="ts16">//## Hint:</span><span class="ts24">&nbsp;Make sure that numbering of objects is up to date. </span></p>
      </td>
    </tr>
    <tr class="row0">
      <td class="cell1">
        <p class="ps5"><br /><span class="ts19">//Walking through database items(selected items) and filtering &quot;Parts&quot;:</span><br /><span class="ts20">var</span><span class="ts21">&nbsp;result = </span><span class="ts20">from</span><span class="ts21">&nbsp;p </span><span class="ts20">in</span><span class="ts21">&nbsp;Database.OfType&lt;Part&gt;()</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">from</span><span class="ts21">&nbsp;Reinforcement r </span><span class="ts20">in</span><span class="ts21">&nbsp;p.GetReinforcements().GetArray()</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts19">//Removing strands and invalid shapes:</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">where</span><span class="ts21">&nbsp;r.GetType().Name != </span><span class="ts22">&quot;RebarStrand&quot;</span><span class="ts21">&nbsp;&amp;&amp; r.IsGeometryValid()</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts19">//Grouping rebars by position number:</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;key1 = r.GetTeklaReport(</span><span class="ts22">&quot;rebar pos&quot;</span><span class="ts21">)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;key2 = r.GetTeklaReport(</span><span class="ts22">&quot;grade&quot;</span><span class="ts21">)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">group</span><span class="ts21">&nbsp;r </span><span class="ts20">by</span><span class="ts21">&nbsp;</span><span class="ts20">new</span><span class="ts21">&nbsp;{ key1, key2 } </span><span class="ts20">into</span><span class="ts21">&nbsp;g</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts19">//Keeping one instance (first one) from each group of data:</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;rebar = g.First()</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts19">//Defining required columns:</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;Pos = g.Key.key1</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;grade = g.Key.key2</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;Size = rebar.GetTeklaReport(</span><span class="ts22">&quot;size&quot;</span><span class="ts21">)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;Type = rebar.GetTeklaReport(</span><span class="ts22">&quot;group type&quot;</span><span class="ts21">) </span><span class="ts19">//Type (Normal= 0, Tapered= 1, Tapered2= 2, Tapered curved= 3, Tapered N= 4, Spiral= 5)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;Pcs = g.Sum(x =&gt; x.GetNumberOfRebars()) </span><span class="ts19">//or g.Sum(x =&gt; x.GetTeklaReport(&quot;number&quot;))</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;Unitlength = rebar.IsTapered() ? </span><span class="ts22">&quot;VAR&quot;</span><span class="ts21">&nbsp;: rebar.GetTeklaReport(</span><span class="ts22">&quot;length&quot;</span><span class="ts21">)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;UnitWeight = rebar.IsTapered() ? </span><span class="ts22">&quot;VAR&quot;</span><span class="ts21">&nbsp;: rebar.GetTeklaReport(</span><span class="ts22">&quot;weight&quot;</span><span class="ts21">)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;TotalWeight = Math.Round(g.Sum(x =&gt; x.WeightInGroup(5)), 3)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;TotalLength = Math.Round(g.Sum(x =&gt; x.LengthInGroup(5)), 3)</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">let</span><span class="ts21">&nbsp;pic = rebar.GetTeklaPullOut()</span><br /><span class="ts21">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts20">select</span><span class="ts21">&nbsp;</span><span class="ts20">new</span><span class="ts21">&nbsp;{ Pos, grade, Type, Size, Pcs, Unitlength, UnitWeight, TotalLength, TotalWeight, pic };</span><br /><span class="ts19">//Passing the final result to the data grid:</span><br /><span class="ts20">return</span><span class="ts21">&nbsp;result;</span></p>
      </td>
    </tr>
  </table>
</div>
<p class="ps0"><span class="ts15">&nbsp;</span></p>
<div>
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts23">Usage:</span></p>
<p><img width="570" height="244" border="0" src="images/image(53).png" /></p>
<p class="ps0"><span class="ts15">&nbsp;</span></p>
<p class="ps0"><span class="ts23">Usage:</span></p>
<p><img width="570" height="376" border="0" src="images/image(54).png" /></p>
<p class="ps0"><span class="ts15">&nbsp;</span></p>
</body>
</html>