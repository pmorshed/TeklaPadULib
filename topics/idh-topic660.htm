<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Create PadFoot with column</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<meta name="generator" content="HelpSmith 6.4 (Build 17.127)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  background-color: LemonChiffon;
  margin: 0.06in 0.06in 0.06in 0.06in;
}
</style>
<link type="text/css" href="../css/topics/style.css" rel="stylesheet" />
<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?14a8a828"></script>
<script type="text/javascript" src="../js/core.js?e3fa3091"></script>
<script type="text/javascript" src="../js/topic.js?e3fa3091"></script>
<script type="text/javascript">
	var topicContext = 660;
</script>
</head>
<body>
<p class="ps0"><html>
<style>
pre {
	width: 100%;
	padding: 0;
	color: #0066ff;
	margin: 0;
	overflow: auto;
	overflow-y: hidden;
	font-size: 11px;
	font-family: monospace;
	line-height: 16px;
	border: 1px solid #777;
}
</style>
<body>
<pre>

// ######################################
// ### Credits: Tekla Corporation
// ### Desc.: Create PadFoot with column
// ######################################

//Hint: Add the following Dlls to references:
//"Tekla.Structures.dll"
//"Tekla.Structures.Model.dll"
//Location: ~\[version]\nt\bin\plugins

using System;
using Tekla.Structures;
using Tekla.Structures.Model;
using Tekla.Structures.Geometry3d;

class Program
{
	static void Main()
	{
		try
		{
			Model MyModel = new Model();
			if (MyModel.GetConnectionStatus())
			{
				// Loop through X-axis  (these loops should be changed to match current grid)
				for (double PositionX = 0.0; PositionX &lt= 12000.0; PositionX += 3000.0)
				{
					// In first and in last line
					if (PositionX.Equals(0.0) || PositionX.Equals(12000.0))
					{
						// Loop through Y-axis to get pad footings on the longer sides of the grid
						for (double PositionY = 0.0; PositionY &lt= 30000.0; PositionY += 6000.0)
						{
							CreateFootingAndColumn(PositionX, PositionY);
						}
					}
					else
					{
						CreateFootingAndColumn(PositionX, 0.0);
						CreateFootingAndColumn(PositionX, 30000.0);
					}
				}
				// Always remember to commit changes to Tekla Structures, otherwise some things might be left in uncertain state
				MyModel.CommitChanges();
			}
		}
		catch (Exception)
		{}
	}

	private static void CreateFootingAndColumn(double PositionX, double PositionY)
	{
		const double FootingSize = 1500;

		ModelObject PadFooting = CreatePadFooting(PositionX, PositionY, FootingSize);
		ModelObject Column = CreateColumn(PositionX, PositionY);
		CreateBasePlate(Column, PadFooting);
	}

	private static ModelObject CreatePadFooting(double PositionX, double PositionY, double FootingSize)
	{
		Beam PadFooting = new Beam();

		PadFooting.Name = "FOOTING";
		PadFooting.Profile.ProfileString = FootingSize + "*" + FootingSize; //"1500*1500";
		PadFooting.Material.MaterialString = "K30-2";
		PadFooting.Class = "8";
		PadFooting.StartPoint.X = PositionX;
		PadFooting.StartPoint.Y = PositionY;
		PadFooting.EndPoint.X = PositionX;
		PadFooting.EndPoint.Y = PositionY;
		PadFooting.EndPoint.Z = -500.0;
		PadFooting.Position.Rotation = Position.RotationEnum.FRONT;
		PadFooting.Position.Plane = Position.PlaneEnum.MIDDLE;
		PadFooting.Position.Depth = Position.DepthEnum.MIDDLE;

		if (!PadFooting.Insert())
		{
			Console.WriteLine("Insertion of pad footing failed.");
		}

		return PadFooting;
	}

	private static ModelObject CreateColumn(double PositionX, double PositionY)
	{
		Beam Column = new Beam();

		Column.Name = "COLUMN";
		Column.Profile.ProfileString = "HEA400";
		Column.Material.MaterialString = "S235JR";
		Column.Class = "2";
		Column.StartPoint.X = PositionX;
		Column.StartPoint.Y = PositionY;
		Column.EndPoint.X = PositionX;
		Column.EndPoint.Y = PositionY;
		Column.EndPoint.Z = 5000.0;
		Column.Position.Rotation = Position.RotationEnum.FRONT;
		Column.Position.Plane = Position.PlaneEnum.MIDDLE;
		Column.Position.Depth = Position.DepthEnum.MIDDLE;

		if (!Column.Insert())
		{
			Console.WriteLine("Insertion of column failed.");
		}

		return Column;
	}

	private static void CreateBasePlate(ModelObject PrimaryObject, ModelObject SecondaryObject)
	{
		Connection BasePlate = new Connection();

		BasePlate.Name = "Stiffened Base Plate";
		BasePlate.Number = 1014;
		BasePlate.LoadAttributesFromFile("standard");
		BasePlate.UpVector = new Vector(0, 0, 1000);
		BasePlate.PositionType = PositionTypeEnum.COLLISION_PLANE;

		BasePlate.SetPrimaryObject(PrimaryObject);
		BasePlate.SetSecondaryObject(SecondaryObject);
		BasePlate.SetAttribute("cut", 1);  //Enable anchor rods

		if (!BasePlate.Insert())
		{
			Console.WriteLine("Insertion of stiffened base plate failed.");
		}
	}
}

</pre>
</body>
</html></p>
</body>
</html>