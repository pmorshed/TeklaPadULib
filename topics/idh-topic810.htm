<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Rebar schedule by pos</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<meta name="generator" content="HelpSmith 6.4 (Build 17.127)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  background-color: LemonChiffon;
  margin: 0.06in 0.06in 0.06in 0.06in;
}
</style>
<link type="text/css" href="../css/topics/style.css" rel="stylesheet" />
<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?4d16057b"></script>
<script type="text/javascript" src="../js/core.js?e3fa3091"></script>
<script type="text/javascript" src="../js/topic.js?e3fa3091"></script>
<script type="text/javascript">
	var topicContext = 810;
</script>
</head>
<body>
<p class="ps0"><html>
<style>
pre {
	width: 100%;
	padding: 0;
	color: #0066ff;
	margin: 0;
	overflow: auto;
	overflow-y: hidden;
	font-size: 11px;
	font-family: monospace;
	line-height: 16px;
	border: 1px solid #777;
}
</style>
<body>
<pre>

// #############################################################
// ### Author: TeklaPad
// ### Desc.: Rebar schedule by pos
// ### Compatibility: TS18 or newer
// ### Hint: Not good for RebarSets 
// ### Hint: Make sure that numbering of objects is up to date.
// #############################################################

//Walking through database items(selected items) and filtering "Rebars":
var result = from r in Database.OfType&ltReinforcement&gt()
//Removing strands:
where r.GetType().Name != "RebarStrand" && r.IsGeometryValid()
//Grouping by pos and grade:
let key1 = r.GetTeklaReport("rebar pos")
let key2 = r.GetTeklaReport("grade")
group r by new { key1, key2 } into g
let rebar = g.First()
//-------Temporary variables (Comparing values with 0.0 and replacing zero values with "-" ----------
let a_min = Equals(rebar.GetTeklaReport("dim a min"), 0.0) ? "-" : rebar.GetTeklaReport("dim a min")
let a_max = Equals(rebar.GetTeklaReport("dim a max"), 0.0) ? "-" : rebar.GetTeklaReport("dim a max")
let b_min = Equals(rebar.GetTeklaReport("dim b min"), 0.0) ? "-" : rebar.GetTeklaReport("dim b min")
let b_max = Equals(rebar.GetTeklaReport("dim b max"), 0.0) ? "-" : rebar.GetTeklaReport("dim b max")
let c_min = Equals(rebar.GetTeklaReport("dim c min"), 0.0) ? "-" : rebar.GetTeklaReport("dim c min")
let c_max = Equals(rebar.GetTeklaReport("dim c max"), 0.0) ? "-" : rebar.GetTeklaReport("dim c max")
let d_min = Equals(rebar.GetTeklaReport("dim d min"), 0.0) ? "-" : rebar.GetTeklaReport("dim d min")
let d_max = Equals(rebar.GetTeklaReport("dim d max"), 0.0) ? "-" : rebar.GetTeklaReport("dim d max")
let e_min = Equals(rebar.GetTeklaReport("dim e min"), 0.0) ? "-" : rebar.GetTeklaReport("dim e min")
let e_max = Equals(rebar.GetTeklaReport("dim e max"), 0.0) ? "-" : rebar.GetTeklaReport("dim e max")
let u_min = Equals(rebar.GetTeklaReport("ang u min"), 0.0) ? "-" : rebar.GetTeklaReport("ang u min")
let u_max = Equals(rebar.GetTeklaReport("ang u max"), 0.0) ? "-" : rebar.GetTeklaReport("ang u max")
let v_min = Equals(rebar.GetTeklaReport("ang v min"), 0.0) ? "-" : rebar.GetTeklaReport("ang v min")
let v_max = Equals(rebar.GetTeklaReport("ang v max"), 0.0) ? "-" : rebar.GetTeklaReport("ang v max")
let td_min = Equals(rebar.GetTeklaReport("dim td min"), 0.0) ? "-" : rebar.GetTeklaReport("dim td min")
let td_max = Equals(rebar.GetTeklaReport("dim td max"), 0.0) ? "-" : rebar.GetTeklaReport("dim td max")
let L_min = rebar.GetTeklaReport("length min")
let L_max = rebar.GetTeklaReport("length max")
let W_min = rebar.GetTeklaReport("weight min")
let W_max = rebar.GetTeklaReport("weight max")
//Returns "true" for tapered groups:  
let IsTapered = L_min != L_max
//--------------------------------------------------------------------------- 

//Defining required columns based on temporary variables:
let Pos = g.Key.key1
let grade = g.Key.key2
let No = g.Sum(x => x.GetNumberOfRebars())
let Size = rebar.GetTeklaReport("size")
let length = IsTapered == true ? L_min + "~" + L_max : L_min
let Weight = IsTapered == true ? W_min + "~" + W_max : W_min
//Hint: It's recommended to use "WEIGHT_TOTAL_IN_GROUP" attribute instead of "WEIGHT_TOTAL" in newer versions of Tekla
let W_Total = IsTapered ? Math.Round(g.Sum(x => (double)x.GetTeklaReport("weight total", 6)), 3) : W_min * No
let L_Total = IsTapered ? Math.Round(W_Total * rebar.GetTeklaReport("length", 7) / rebar.GetTeklaReport("weight", 7), 3) : L_min * No
let A = a_min == a_max ? a_min : a_min + "~" + a_max
let B = b_min == b_max ? b_min : b_min + "~" + b_max
let C = c_min == c_max ? c_min : c_min + "~" + c_max
let D = d_min == d_max ? d_min : d_min + "~" + d_max
let E = e_min == e_max ? e_min : e_min + "~" + e_max
let U = u_min == u_max ? u_min : u_min + "~" + u_max
let V = v_min == v_max ? v_min : v_min + "~" + v_max
let TD = td_min == td_max ? td_min : td_min + "~" + td_max
//Selecting a new table (from orginal database) with required columns:
select new { Pos, Size, grade, No, length, Weight, A, B, C, D, E, U, V, TD, L_Total, W_Total };
//Passing the final result to the gridview:
return result;

</pre>
</body>
</html></p>
<div>
  <div class="hline0"></div>
</div>
<p class="ps0"><span class="ts12">Usage:</span></p>
<p><img width="685" height="165" border="0" src="images/image(49).png" /></p>
<p class="ps0"><span class="ts11">&nbsp;</span></p>
<p class="ps0"><span class="ts12">Usage:</span></p>
<p><img width="685" height="253" border="0" src="images/image(52).png" /></p>
<p class="ps0"><span class="ts11">&nbsp;</span></p>
</body>
</html>