<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Rebar sample2</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<meta name="generator" content="HelpSmith 6.4 (Build 17.127)" />
<style type="text/css" media="screen">
html {
  height: 100%;
}
body {
  background-color: LemonChiffon;
  margin: 0.06in 0.06in 0.06in 0.06in;
}
</style>
<link type="text/css" href="../css/topics/style.css" rel="stylesheet" />
<script type="text/javascript" src="../js/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="../js/settings.js?f646f1df"></script>
<script type="text/javascript" src="../js/core.js?e3fa3091"></script>
<script type="text/javascript" src="../js/topic.js?e3fa3091"></script>
<script type="text/javascript">
	var topicContext = 690;
</script>
</head>
<body>
<p class="ps0"><html>
<style>
pre {
	width: 100%;
	padding: 0;
	color: #0066ff;
	margin: 0;
	overflow: auto;
	overflow-y: hidden;
	font-size: 11px;
	font-family: monospace;
	line-height: 16px;
	border: 1px solid #777;
}
</style>
<body>
<pre>

// ####################################
// ### Credits: Tekla Corporation
// ### Desc.: Rebar sample2
// ####################################

//Hint: Add the following Dlls to references:
//"Tekla.Structures.dll"
//"Tekla.Structures.Model.dll"
//Location: ~\[version]\nt\bin\plugins

using System;
using System.Collections;
using Tekla.Structures;
using Tekla.Structures.Geometry3d;
using Tekla.Structures.Model;
using TSMUI = Tekla.Structures.Model.UI;


	// This is a sample #2 of reinforcement creation with Tekla.Net API. In this sample #2 we have a static application 
	// which creates longitudinal bars at bottom and top of part and stirrups around them for selected parts. 
	// The implementatiomn is based on usage of two system components throught Tekla.Net. The advanatage of this compared to 
	// usage of basic classess that the actual reinforcement have the limited intelligence provided by the system components like
	// stirrups and bars reaction to voids.
	class Class1
	{

		// The main entry point for the application.
		static void Main()
		{
			try
			{
				Model myModel = new Model();
				ModelObjectEnumerator myEnum = new TSMUI.ModelObjectSelector().GetSelectedObjects();

				while (myEnum.MoveNext())
				{
					Beam myPart = myEnum.Current as Beam;
					if (myPart != null)
					{
						// first store current work plane 
						TransformationPlane currentPlane = myModel.GetWorkPlaneHandler().GetCurrentTransformationPlane();

						// set new work plane same as part's local coordsys
						TransformationPlane localPlane = new TransformationPlane(myPart.GetCoordinateSystem());
						myModel.GetWorkPlaneHandler().SetCurrentTransformationPlane(localPlane);

						// get solid of part to be used for rebar component point calculations
						Solid solid = myPart.GetSolid() as Solid;

						// initialize the component used to model longitudinal bars
						Component component1 = new Component();
						component1.Number = 30000070;   // unique number for "longitudinal rebars" component

						// mamange the settings i.e. load standard defaults and set the few important attribute values explicitely
						component1.LoadAttributesFromFile("standard");
						component1.SetAttribute("bar1_no", 4);      // number of bars
						component1.SetAttribute("cc_side", 45.0);   // cover thickness at side
						component1.SetAttribute("cc_bottom", 45.0); // cover thickness at bottom


						// prepare input points for the "longitudinal rebars" component
						Point p1 = new Point(solid.MinimumPoint.X, solid.MinimumPoint.Y, solid.MaximumPoint.Z);
						Point p2 = new Point(solid.MaximumPoint.X, solid.MinimumPoint.Y, solid.MaximumPoint.Z);
						Point p3 = new Point(solid.MinimumPoint.X, solid.MinimumPoint.Y, solid.MinimumPoint.Z);

						// set up component input sequence
						ComponentInput input1 = new ComponentInput();
						input1.AddInputObject(myPart);
						input1.AddTwoInputPositions(p1, p2);
						input1.AddOneInputPosition(p3);

						// Add the input for component 
						component1.SetComponentInput(input1);

						// insert new component instance into model
						component1.Insert();

						// resuse the same component object to add new instance at top of beam

						// modify input points
						p1.Y = p2.Y = p3.Y = solid.MaximumPoint.Y;  // "move" points to top of beam

						// modify neccesary settings & insert compoent instance into model
						component1.SetAttribute("bar1_no", 2);
						component1.Insert();

						// initialize the component to be used to model stirrups
						Component component2 = new Component();
						component2.Number = 30000067;   // unique number for "Stirrup reinforcement" component

						// prepare input polygon for the component
						Polygon polygon = new Polygon();
						polygon.Points.Add(new Point(solid.MinimumPoint.X, solid.MaximumPoint.Y, solid.MinimumPoint.Z));
						polygon.Points.Add(new Point(solid.MinimumPoint.X, solid.MaximumPoint.Y, solid.MaximumPoint.Z));
						polygon.Points.Add(new Point(solid.MinimumPoint.X, solid.MinimumPoint.Y, solid.MaximumPoint.Z));
						polygon.Points.Add(new Point(solid.MinimumPoint.X, solid.MinimumPoint.Y, solid.MinimumPoint.Z));
						polygon.Points.Add(new Point(solid.MinimumPoint.X, solid.MinimumPoint.Y, solid.MinimumPoint.Z));

						// set up component input sequence
						ComponentInput input2 = new ComponentInput();
						input2.AddInputObject(myPart);
						input2.AddInputPolygon(polygon);
						input2.AddTwoInputPositions(new Point(solid.MinimumPoint.X, 0, 0), new Point(solid.MaximumPoint.X, 0, 0));

						// Add the input for component 
						component2.SetComponentInput(input2);

						// mamange the settings i.e. load standard defaults and set the few important attribute values explicitely
						component2.LoadAttributesFromFile("standard");
						component2.SetAttribute("bar1_size", "8");

						// insert new component instance into model
						component2.Insert();

						// remember to restore current work plane
						myModel.GetWorkPlaneHandler().SetCurrentTransformationPlane(currentPlane);

					}
				}
				myModel.CommitChanges();
			}
			catch (Exception e)
			{
				//Console.WriteLine("Exception: " + e.ToString());
			}

		}
	}



</pre>
</body>
</html></p>
</body>
</html>